import React, { useState, useEffect } from "react";
import axios from "axios";
import { updateTask } from "../services/taskService";
import API_BASE_URL from "../config";

interface TaskItem {
    id: string;
    title: string;
    description: string;
    projectId: string; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    status: number;
    priority: number;
    userId: string;
    performerId?: string | null;
    categoryId?: string | null;
    dueDate?: Date | undefined;
}

interface User {
    id: string;
    name: string;
}

interface Project {
    id: string;
    name: string;
}

interface Category {
    id: string;
    name: string;
}

interface EditTaskProps {
    task: TaskItem;
    onClose: () => void;
    onTaskUpdated: () => void;
}

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è `Date` –≤ `YYYY-MM-DD` (–¥–ª—è input type="date")
const formatDate = (date?: Date | null): string => {
    return date ? new Date(date).toISOString().split("T")[0] : "";
};

const EditTask: React.FC<EditTaskProps> = ({ task, onClose, onTaskUpdated }) => {
    // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º `useState` –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ `useEffect`)
    const [title, setTitle] = useState("");
    const [description, setDescription] = useState("");
    const [priority, setPriority] = useState("");
    const [status, setStatus] = useState("");
    const [performerId, setPerformerId] = useState("");
    const [projectId, setProjectId] = useState("");
    const [categoryId, setCategoryId] = useState("");
    const [dueDate, setDueDate] = useState("");

    const [users, setUsers] = useState<User[]>([]);
    const [projects, setProjects] = useState<Project[]>([]);
    const [categories, setCategories] = useState<Category[]>([]);

    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
    useEffect(() => {
        setTitle(task.title || "");
        setDescription(task.description || "");
        setPriority(task.priority.toString());
        setStatus(task.status.toString());
        setPerformerId(task.performerId || "");
        setProjectId(task.projectId || "");
        setCategoryId(task.categoryId || "");
        setDueDate(formatDate(task.dueDate)); // üìå –¢–µ–ø–µ—Ä—å `dueDate` –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD`
    }, [task]);

    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ–µ–∫—Ç—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    useEffect(() => {
        axios.get<User[]>(`${API_BASE_URL}/api/task/users`)
            .then(response => setUsers(response.data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error));

        axios.get<Project[]>(`${API_BASE_URL}/api/task/project`)
            .then(response => setProjects(response.data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error));

        axios.get<Category[]>(`${API_BASE_URL}/api/task/categories`)
            .then(response => setCategories(response.data))
            .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error));
    }, []);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `dueDate` –≤ `Date | undefined`, —É–±–∏—Ä–∞—è `null`
        const parsedDueDate: Date | undefined = dueDate ? new Date(dueDate) : undefined;

        const updatedTask: Partial<TaskItem> = {
            id: task.id,
            title,
            description,
            priority: Number(priority),
            status: Number(status),
            projectId: projectId || task.projectId,
            categoryId,
            dueDate: parsedDueDate === null ? undefined : parsedDueDate, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            performerId
        };

        await updateTask(task.id, updatedTask);
        onTaskUpdated();
        onClose();
    };




    return (
        <div className="modal-overlay">
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                <div className="create-task-container">
                    <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</h2>

                    <div className="input-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</label>
                        <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} />
                    </div>

                    <div className="input-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea value={description} onChange={(e) => setDescription(e.target.value)} />
                    </div>

                    <div className="form-group">
                        <div className="input-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                            <select value={priority} onChange={(e) => setPriority(e.target.value)}>
                                <option value="0">–ù–∏–∑–∫–∏–π</option>
                                <option value="1">–°—Ä–µ–¥–Ω–∏–π</option>
                                <option value="2">–í—ã—Å–æ–∫–∏–π</option>
                            </select>
                        </div>

                        <div className="input-group">
                            <label>–°—Ç–∞—Ç—É—Å</label>
                            <select value={status} onChange={(e) => setStatus(e.target.value)}>
                                <option value="0">–ù–æ–≤–∞—è</option>
                                <option value="1">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                                <option value="2">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
                            </select>
                        </div>
                    </div>

                    <div className="input-group">
                        <label>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</label>
                        <input
                            type="date"
                            value={dueDate}
                            onChange={(e) => setDueDate(e.target.value)}
                        />
                    </div>

                    <div className="input-group">
                        <label>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</label>
                        <select value={performerId} onChange={(e) => setPerformerId(e.target.value)}>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</option>
                            {users.map(user => (
                                <option key={user.id} value={user.id}>{user.name}</option>
                            ))}
                        </select>
                    </div>

                    <div className="input-group">
                        <label>–ü—Ä–æ–µ–∫—Ç</label>
                        <select value={projectId} onChange={(e) => setProjectId(e.target.value)}>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç</option>
                            {projects.map(project => (
                                <option key={project.id} value={project.id}>{project.name}</option>
                            ))}
                        </select>
                    </div>

                    <div className="input-group">
                        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <select value={categoryId} onChange={(e) => setCategoryId(e.target.value)}>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                            {categories.map(category => (
                                <option key={category.id} value={category.id}>{category.name}</option>
                            ))}
                        </select>
                    </div>

                    <div className="buttons">
                        <button onClick={handleSubmit} className="buttonstyle">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button onClick={onClose} className="button secondary">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default EditTask;
